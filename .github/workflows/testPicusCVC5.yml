# This is a basic workflow to help you get started with Actions

name: test Picus CVC5

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  runPicus:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: checkoutFormalBenchmarksForPicus
      - name: CVC4 Cache
        uses: actions/cache@v3
        id: cvc4Cache
        with:
          path: |
            CVC4
          key: ${{ runner.os }}-CVC4
      - name: cocoaCache
        uses: actions/cache@v3
        id: cocoaCache
        with:
          path: |
            CVC4/CoCoALib-0.99800
            CVC4/CoCoALib-0.99800.tgz
          key: ${{ runner.os }}-cocoa
      - name: cvcMakeCache
        uses: actions/cache@v3
        id: cvcMakeCache
        with:
          path: |
            CVC4/build
          key: ${{ runner.os }}-cocoa
      #- name: libpoly Cache
      #  uses: actions/cache@v3
      #  id: libpolyCache
      #  with:
      #    path: |
      #      libpoly
      #    key: ${{ runner.os }}-libpoly
      - name: Cache Racket dependencies
        uses: actions/cache@v3
        id: racketCache
        with:
          path: |
            ~/.cache/racket
            ~/.local/share/racket
          key: ${{ runner.os }}-racket-current-8.6  
      - name: Install Racket
        uses: Bogdanp/setup-racket@v1.8.1
        with:
          architecture: 'x64'
          distribution: 'full'
          variant: 'CS'
          version: '8.6' # Note: We could use current version here like in here: https://github.com/Bogdanp/setup-racket-cache-example/blob/master/.github/workflows/push.yml but then we need to tweak the caching
      - if: steps.cvc4Cache.outputs.cache-hit != 'true'    
        uses: actions/checkout@v3
        with:
          repository: alex-ozdemir/CVC4
          ref: ddcecc5ee3281831953ea04ba127c80d08122dad
          path: 'CVC4'
      - if: steps.cocoaCache.outputs.cache-hit != 'true'
        run: |
          wget "https://cocoa.dima.unige.it/cocoa/cocoalib/tgz/CoCoALib-0.99800.tgz"
          tar -xzf CoCoALib-0.99800.tgz
          cd CoCoALib-0.99800
          ./configure
          make
        working-directory: CVC4
        name: build Cocoa
      - run: |
          ls -al
          pip install toml
          ls -al
          ./configure.sh --cocoa --auto-download
        name: configure CVC4 build
        working-directory: CVC4
      - if: steps.cvcMakeCache.outputs.cache-hit != 'true'
        run: |
          ls -al
          make
          ls -al
        name: make CVC4 build
        working-directory: CVC4/build
      - run: |
          which cvc5
          ls -al
          git apply < ../cmake/deps-utils/CoCoALib-0.99800-trace.patch
        working-directory: CVC4/CoCoALib-0.99800
      - run: |
          ls -al
          ./configure
        working-directory: CVC4/CoCoALib-0.99800
        name: configure cocoa after patch
      - run: |
          ls -al
          make
        working-directory: CVC4/CoCoALib-0.99800
        name: make cocoa after patch
      - uses: actions/checkout@v3
        with:
          repository: SRI-CSL/libpoly
          path: libpoly
      - name: ls -al in libpoly
        run: |
          pwd
          ls -al
          cd build
          ls -al
        working-directory: libpoly
      - name: libpoly cmake
        run: | 
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make
        working-directory: libpoly/build
      - name: libpoly make install
        run: sudo make install
        working-directory: libpoly/build
      - name: back to cvc4 install
        run: |
         ls -al
         ls -al build
         ./configure.sh --cocoa --auto-download
         ls -al
         ls -al build
        working-directory: CVC4
      - name: make j4 install
        run: |
          ls -al
          sudo make -j4 install
          ls -al
        working-directory: CVC4/build
      - name: which cvc5
        run: which cvc5
      - uses: actions/checkout@v3
        with:
          repository: chyanju/Picus
          path: Picus
      - if: steps.racketCache.outputs.cache-hit != 'true'    
        run: raco pkg install --auto --skip-installed rosette csv-reading
      - if: steps.racketCache.outputs.cache-hit != 'true'    
        run: brew install z3
      - run: racket ./test-v3-uniqueness.rkt --r1cs ../generated/O0/XOR@gates@circomlib.r1cs --solver cvc5
        working-directory: Picus

