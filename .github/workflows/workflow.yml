# This workflow runs when a new circuit is added to the repository or when a change occurs to an external tool like ECNE

name: Run Benchmarks

# TODO Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# When a circuit is uploaded to a particular folder
# 1. Generate the different .circom files to take into account different inputs 
# 2. Install circom
# 3. Run circom on each of the generated files, on each of the compiler optimization flags
# 4. Run the formal verification tool against all of the r1cs files, and determine accuracy

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Let's tackle step (2) first.

    
  installCircom:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/cache@v3
      id: cache
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - uses: actions/checkout@v3
      with:
        repository: iden3/circom
        path: circom
    - if: steps.cache.outputs.cache-hit != 'true'
      run: cargo build --release
      working-directory: circom
    - if: steps.cache.outputs.cache-hit != 'true'
      run: cargo install --path circom
      working-directory: circom
    - uses: actions/checkout@v3
      with:
        path: main
    - run: circom example.circom --r1cs
      working-directory: main/scratch
# Install Julia
#    - uses: actions/checkout@v1.0.0
#    - uses: julia-actions/setup-julia@v1
#      with:
#       version: 1.7
#    - uses: julia-actions/cache@v1
#      id: juliaCache
#    - uses: extractions/setup-just@v1
#    - uses: actions/checkout@v3
#      with: 
#        repository: franklynwang/EcneProject
#        path: EcneProject
#    - if: steps.juliaCache.outputs.cache-hit != 'true'
#      run: just install
#      working-directory: EcneProject
#    - run: julia --project=. src/Ecne.jl --r1cs target/division.r1cs --name division --sym target/division.sym
#      working-directory: EcneProject
#    - run: julia --project=. src/Ecne.jl --r1cs ../generated/O0/XOR@gates@circomlib.r1cs --name xor --sym ../generated/O0/XOR@gates@circomlib.sym
#      working-directory: EcneProject
  ## Install Picus
    - name: Cache Racket dependencies
      uses: actions/cache@v3
      id: racketCache
      with:
        path: |
          ~/.cache/racket
          ~/.local/share/racket
        key: ${{ runner.os }}-racket-current-8.6  
    - name: Install Racket
      uses: Bogdanp/setup-racket@v1.8.1
      with:
        architecture: 'x64'
        distribution: 'full'
        variant: 'CS'
        version: '8.6' # Note: We could use current version here like in here: https://github.com/Bogdanp/setup-racket-cache-example/blob/master/.github/workflows/push.yml but then we need to tweak the caching
    - uses: actions/checkout@v3
      with:
        repository: Veridise/Picus
        path: Picus
    - if: steps.racketCache.outputs.cache-hit != 'true'    
      run: raco pkg install --auto --skip-installed rosette csv-reading
    - run: brew install z3
    - run:  ls -al
      working-directory: Picus
    - run: racket ./test-inc-uniqueness.rkt --r1cs ../main/generated/O0/XOR@gates@circomlib.r1cs
      working-directory: Picus
  
    
      
      
